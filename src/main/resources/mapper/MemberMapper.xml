<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.da.mapper.MemberMapper">
	
   <!-- 회원등록 -->
   <insert id="memberInsert" parameterType="hashMap">
    	INSERT INTO TBL_DA_MBR_M
        (
        	AUTH_SQ
			,MBR_SQ
			,MBR_ID
			,MBR_EMAIL
			,MBR_PASSWRD
			,MBR_NM
			,MBR_NCKNM
			,MBR_NATN_CD
			,MBR_BIRTH
			,MBR_SEX_CD
			,MBR_HOME_ADDR
			,MBR_DELIVRY_ADDR
			,MBR_DELIVRY_CP_NUM
			,MBR_CP_NUM
			,MBR_CP_CERT_YN
			,MBR_CP_CERT_DATE
			,REG_MBR_SQ
			,REG_DT
			,UPDT_MBR_SQ
			,UPDT_DT
			,USE_YN
			,DEL_YN
			,MBR_SOCIAL_SORT
			,MBR_CP_CERT_DI
			,MBR_EML_ALARM
			,MBR_CP_ALARM
       	) 
        VALUES
        (
        	'1'
			,#{mbrSq}
			,#{mbrId}
			,#{mbrEmail}
			,#{mbrPasswrd}
			,#{mbrNm}
			,#{mbrNcknm}
			,'KR'
			,#{mbrBirth}
			,#{mbrSexCd}
			,#{mbrHomeAddr}
			,#{mbrDelivryAddr}
			,#{mbrDelivryCpNum}
			,#{mbrCpNum}
			,#{mbrCpCertYn}
			,#{mbrCpCertDate}
			,'1'
			,NOW()
			,'1'
			,NOW()
			,#{useYn}
			,'N'
			,#{mbrSocialSort}
			,#{mbrCpCertDi}
			,#{mbrEmlAlarm}
			,#{mbrCpAlarm}
        )
    </insert>
    
    <!-- 회원 상세 -->
    <select id="memberContent" resultType="hashMap">
        SELECT
            AUTH_SQ               AS authSq
			,MBR_SQ               AS mbrSq
			,MBR_ID               AS mbrId
			,MBR_EMAIL            AS mbrEmail
			,MBR_PASSWRD          AS mbrPasswrd
			,MBR_NM               AS mbrNm
			,MBR_NCKNM            AS mbrNcknm
			,MBR_NATN_CD          AS mbrNatnCd
			,MBR_BIRTH            AS mbrBirth
			,(
				CASE 
					WHEN MBR_SEX_CD = 'MALE' THEN '남'
					WHEN MBR_SEX_CD = 'FEMALE' THEN '여' 
				END
			 ) AS mbrSexCd
			,MBR_SEX_CD AS mbrSexCdChk
			,MBR_HOME_ADDR        AS mbrHomeAddr
			,MBR_DELIVRY_ADDR     AS mbrDelivryAddr
			,MBR_CP_NUM           AS mbrCpNum
			,MBR_CP_CERT_YN       AS mbrCpCertYn
			,DATE_FORMAT(MBR_CP_CERT_DATE,'%Y-%m-%d %H:%i:%s') AS mbrCpCertDate
			,REG_MBR_SQ           AS regMbrSq
			,DATE_FORMAT(REG_DT,'%Y-%m-%d')  AS regDt
			,UPDT_MBR_SQ          AS updtMbrSq
			,DATE_FORMAT(UPDT_DT,'%Y-%m-%d')  AS updtDt
			,USE_YN               AS useYn
			,DEL_YN				  AS delYn
			,MBR_EML_ALARM		  AS mbrEmlAlarm
			,MBR_CP_ALARM		  AS mbrCpAlarm
			,MBR_CP_CERT_DI		  AS mbrCpCertDi
			,MBR_ACCOUNT_NO		  AS mbrAccountNo
			,MBR_BANK_CD		  AS mbrBankCd
			,MBR_BANK_NM		  AS mbrBankNm
			,MBR_PROFILE_IMG_URL  AS mbrProfileImgUrl
			,MBR_GENRE_LIST  AS mbrGenreList
			,MBR_HOBBY_LIST  AS mbrhobbyList
			,MBR_AGE_LIST  AS mbrageList
			,MBR_JOB_LIST  AS mbrjobList   
			,MBR_INTRO  AS mbrintro

        FROM
            TBL_DA_MBR_M A 
        WHERE 1=1
        <if test="mbrSq != null"> 
        	AND A.MBR_SQ = #{mbrSq}
        </if>
        
        <if test="mbrId != null"> 
        	AND A.MBR_ID = #{mbrId}
        </if>
         
  </select>
    
    
    <update id="memberUpdate" parameterType="hashMap">
   		UPDATE TBL_DA_MBR_M 
   		
   		<trim prefix="SET" suffixOverrides=",">
      		<if test="mbrNm 		 != null and mbrNm != ''">MBR_NM =#{mbrNm},</if>
      		<if test="authSq 		 != null and authSq != ''">AUTH_SQ =#{authSq},</if>
			<if test="mbrEmail 		 != null and mbrEmail != ''">MBR_EMAIL =#{mbrEmail},</if>
			<if test="mbrPasswrd 	 != null and mbrPasswrd != ''">MBR_PASSWRD =#{mbrPasswrd},</if>
			<if test="mbrNatnCd      != null and mbrNatnCd != ''">MBR_NATN_CD = #{mbrNatnCd},</if>
			<if test="mbrBirth       != null and mbrBirth != ''">MBR_BIRTH = #{mbrBirth},</if>
			<if test="mbrSexCd       != null and mbrSexCd != ''">MBR_SEX_CD = #{mbrSexCd},</if>
			<if test="mbrHomeAddr    != null and mbrHomeAddr != ''">MBR_HOME_ADDR = #{mbrHomeAddr},</if>
			<if test="mbrDelivryAddr != null and mbrDelivryAddr != ''">MBR_DELIVRY_ADDR = #{mbrDelivryAddr},</if>
			<if test="mbrCpNum       != null and mbrCpNum != ''">MBR_CP_NUM = #{mbrCpNum},</if>
			<if test="mbrNcknm       != null and mbrNcknm != ''">MBR_NCKNM = #{mbrNcknm},</if>
			<if test="mbrCpCertDi    != null and mbrCpCertDi != ''">MBR_CP_CERT_DI = #{mbrCpCertDi},</if>
			UPDT_DT = NOW(),
			<if test="useYn          != null and useYn != ''">USE_YN = #{useYn},</if>
			<if test="delYn          != null and delYn != ''">DEL_YN = #{delYn},</if>
			<if test="mbrEmlAlarm    != null and mbrEmlAlarm != ''">MBR_EML_ALARM = #{mbrEmlAlarm},</if>
			<if test="mbrCpAlarm     != null and mbrCpAlarm != ''">MBR_CP_ALARM = #{mbrCpAlarm},</if>
			<if test="mbrCpCertYn    != null and mbrCpCertYn != ''">MBR_CP_CERT_YN = #{mbrCpCertYn},</if>
			<if test="mbrCpCertDate  != null and mbrCpCertDate != ''">MBR_CP_CERT_DATE = #{mbrCpCertDate},</if>
			<if test="mbrAccountNo   != null and mbrAccountNo != ''">MBR_ACCOUNT_NO = #{mbrAccountNo},</if>
			<if test="mbrBankCd      != null and mbrBankCd != ''">MBR_BANK_CD = #{mbrBankCd},</if>
			<if test="mbrBankNm      != null and mbrBankNm != ''">MBR_BANK_NM = #{mbrBankNm},</if>
			<if test="mbrProfileImgUrl      != null">MBR_PROFILE_IMG_URL = #{mbrProfileImgUrl},</if>
			<if test="mbrGenreList          != null">MBR_GENRE_LIST = #{mbrGenreList},</if>
			<if test="mbrhobbyList          != null">MBR_HOBBY_LIST = #{mbrhobbyList},</if>
			<if test="mbrageList          != null">MBR_AGE_LIST = #{mbrageList},</if>
			<if test="mbrjobList          != null">MBR_JOB_LIST = #{mbrjobList},</if>
			<if test="mbrintro          != null">MBR_INTRO = #{mbrintro},</if>
			
   		</trim>
   		WHERE MBR_SQ = #{mbrSq}
	</update>
   
   <select id="login" resultType="hashMap" parameterType="hashMap">
   		/* 회원 로그인 */
		SELECT 	
				MBR_SQ AS mbrSq,
				AUTH_SQ AS authSq
		FROM 	
				TBL_DA_MBR_M
		WHERE 	
				USE_YN = 'Y'
			AND DEL_YN = 'N'
			AND	MBR_ID = #{loginId}
			AND	MBR_PASSWRD = #{loginPw}   
   </select>
   
   <select id="loginIdCheck" resultType="int" parameterType="hashMap">
   /* 회원 로그인 아이디 체크 */
		SELECT 	
				COUNT(MBR_SQ)
		FROM 	
				TBL_DA_MBR_M
		WHERE 	
				MBR_ID = #{loginId}
   </select>
   
   <select id="loginPwdCheck" resultType="int" parameterType="hashMap">
   /* 회원 로그인 패스워드 체크 */
		SELECT 	
				COUNT(MBR_SQ)
		FROM 	
				TBL_DA_MBR_M
		WHERE 	
				MBR_ID = #{loginId}
			AND	MBR_PASSWRD = #{loginPw}  
   </select>
   
   <select id="getArtistInfo" resultType="hashMap" parameterType="String">
	   /* 작가 정보 */
	   SELECT 
			B.ARTST_SQ AS artstSq,
			B.ARTST_ACTVTY_NM AS artstActvtyNm,
			B.ARTST_ENGLS_NM AS artstEnglsNm,
			YEAR (A.MBR_BIRTH) AS artstBirthYear,
			B.ARTST_YOD AS artstYod
		FROM 
				TBL_DA_MBR_M AS A,
				TBL_DA_ARTST_M AS B
		WHERE 
				A.MBR_SQ = B.MBR_SQ 
			AND A.MBR_SQ = #{value}
   </select>
   
   <update id="memberWithdrawal" parameterType="hashMap">
   /* 회원 탈퇴 */
   		UPDATE 	TBL_DA_MBR_M
   		
   		SET		USE_YN = 'N',
   				DEL_YN = 'Y'
   		
   		WHERE 	MBR_ID = #{email}
   			AND	MBR_EMAIL = #{email}
   			AND MBR_PASSWRD = #{password}	
   		
   </update>
   
   <select id="memberWithdrawalCheck" resultType="int" parameterType="hashMap">
   /* 회원 탈퇴 여부 */
   		SELECT 	
   				COUNT(MBR_SQ)
   		FROM 
   				TBL_DA_MBR_M
   		WHERE 	
   				MBR_ID = #{email}
   			AND	MBR_EMAIL = #{email}
   			AND MBR_PASSWRD = #{password}
   			AND USE_YN = 'N'
   			AND DEL_YN = 'Y'	
   </select>
   
   <!-- 회원 아이디 검색 -->
   <select id="memberIdCheck" resultType="int">
        SELECT
            count(*)
        FROM
            TBL_DA_MBR_M A
        WHERE 
        	MBR_ID = #{mbrId}
  </select>  
  
  <select id="memberInfoCount" resultType="int">
        SELECT
            count(*)
        FROM
            TBL_DA_MBR_M A
        WHERE 
        	MBR_ID = #{mbrId}
  </select>   
 
  <!-- 작가기본정보 입력 -->
  <insert id="authorInfoBaseInsert" parameterType="hashMap">
  		INSERT INTO TBL_DA_ARTST_M
  		(
  			MBR_SQ
			,ARTST_ACTVTY_NM
			,ARTST_ENGLS_NM
			,ARTST_ACTVTY_PART_CD
			,ARTST_ACTVTY_NATN_CD
			,ARTST_ACTVTY_CITY_CD
			,ARTST_SELF_INTRO
			,ARTST_PROFILE_IMG_URL
			,ARTST_WORK_IMG_URL
			,ARTST_HMPG_URL
			,ARTST_PROMTN_VIDEO_URL
			,ARTST_FACEBOOK_URL
			,ARTST_INSTAGRAM_URL
			,REG_MBR_SQ
			,REG_DT
			,UPDT_MBR_SQ
			,UPDT_DT
			,USE_YN
			,DEL_YN
			
		) VALUES (
			
        	#{mbrSq}
			,#{artstActvtyNm}
			,#{artstEnglsNm}
			,#{artstActvtyPartCd}
			,#{artstActvtyNatnCd}
			,#{artstActvtyCityCd}
			,#{artstSelfIntro}
			,#{artstProfileImgUrl}
			,#{artstWorkImgUrl}
			,#{artstHmpgUrl}
			,#{artstPromtnVideoUrl}
			,#{artstFacebookId}
			,#{artstInstagramId}
			,'1'
			,NOW()
			,'1'
			,NOW()
			,#{useYn}
			,'N'
        )
  </insert>
  <!-- 작가기본정보 수정 -->
  <update id="authorInfoBaseUpdate" parameterType="hashMap">
   		UPDATE TBL_DA_ARTST_M 
   		<trim prefix="SET" suffixOverrides=",">
      		<if test="artstActvtyNm">ARTST_ACTVTY_NM = #{artstActvtyNm},</if>
			<if test="artstEnglsNm">ARTST_ENGLS_NM = #{artstEnglsNm},</if>
			<if test="artstActvtyPartCd">ARTST_ACTVTY_PART_CD = #{artstActvtyPartCd},</if>
			<if test="artstActvtyNatnCd">ARTST_ACTVTY_NATN_CD = #{artstActvtyNatnCd},</if>
			<if test="artstActvtyCityCd">ARTST_ACTVTY_CITY_CD = #{artstActvtyCityCd},</if>
			<if test="artstSelfIntro">ARTST_SELF_INTRO = #{artstSelfIntro},</if>
			<if test="artstProfileImgUrl">ARTST_PROFILE_IMG_URL = #{artstProfileImgUrl},</if>
			<if test="artstWorkImgUrl">ARTST_WORK_IMG_URL = #{artstWorkImgUrl},</if>
			<if test="artstHmpgUrl">ARTST_HMPG_URL = #{artstHmpgUrl},</if>
			<if test="artstPromtnVideoUrl">ARTST_PROMTN_VIDEO_URL = #{artstPromtnVideoUrl},</if>
			<if test="artstFacebookUrl">ARTST_FACEBOOK_URL = #{artstFacebookUrl},</if>
			<if test="artstInstagramUrl">ARTST_INSTAGRAM_URL = #{artstInstagramUrl},</if>
			UPDT_DT = NOW(),
			<if test="useYn">USE_YN = #{useYn},</if>
   		</trim>
   		WHERE MBR_SQ = #{mbrSq}
	</update>
	
  <!-- 작가기본정보 내용보기 -->
  <select id="authorBaseInfo" resultType="hashMap">
        SELECT
          	 A.MBR_SQ					AS mbrSq              
			,A.ARTST_SQ					AS artstSq           
			,A.ARTST_ACTVTY_NM			AS artstActvtyNm      
			,A.ARTST_ENGLS_NM			AS artstEnglsNm
			,YEAR(B.MBR_BIRTH)			AS artstBirthYear
			,A.ARTST_YOD				AS artstYod       
			,A.ARTST_ACTVTY_PART_CD		AS artstActvtyPartCd  
			,A.ARTST_ACTVTY_NATN_CD		AS artstActvtyNatnCd
			,A.ARTST_ACTVTY_CITY_CD		AS artstActvtyCityCd      
			,A.ARTST_SELF_INTRO			AS artstSelfIntro     
			,A.ARTST_PROFILE_IMG_URL	AS artstProfileImgUrl 
			,A.ARTST_WORK_IMG_URL		AS artstWorkImgUrl 
			,A.ARTST_HMPG_URL			AS artstHmpgUrl       
			,A.ARTST_PROMTN_VIDEO_URL	AS artstPromtnVideoUrl
			,A.ARTST_FACEBOOK_URL		AS artstFacebookUrl    
			,A.ARTST_INSTAGRAM_URL		AS artstInstagramUrl   
			,A.REG_MBR_SQ				AS regMbrSq           
			,A.REG_DT					AS regDt              
			,A.UPDT_MBR_SQ				AS updtMbrSq          
			,A.UPDT_DT					AS updtDt             
			,A.USE_YN					AS useYn              
			,A.DEL_YN					AS delYn  

        FROM 
        		TBL_DA_ARTST_M AS A
        INNER JOIN 
        		TBL_DA_MBR_M AS B
        	ON	A.MBR_SQ = B.MBR_SQ
        WHERE 
        		A.MBR_SQ = #{mbrSq}
  </select>
  <!-- 작가기본정보 카운터 -->
  <select id="authorBaseInfoCount" resultType="int">
  	SELECT
    	COUNT(*) AS CNT      
	FROM TBL_DA_ARTST_M
    WHERE MBR_SQ = #{mbrSq}
  </select>
    
  <!-- 작가학력정보 등록 -->
  <insert id="authorEduInfoInsert" parameterType="hashMap">
  		INSERT INTO TBL_DA_ARTST_EDUCTN_S
  		(
  			ARTST_SQ
			,MBR_SQ
			,EDUCTN_NM
			,EDUCTN_MAJOR
			
  		) VALUES (
  			#{artstSq}
  		   ,#{mbrSq}
  		   ,#{eductnNm}
  		   ,#{eductnMajor}
  		)
  </insert>
  
  <!-- 작가학력정보 리스트 -->   
   <select id="authorEduInfoList" resultType="hashMap">
   		SELECT
   			
   			EDUCTN_SQ AS eductnSq
   			,ARTST_SQ AS artstSq 
			,MBR_SQ AS mbrSq 
			,EDUCTN_NM AS eductnNm
			,EDUCTN_MAJOR AS eductnMajor
			
   		FROM 
   			TBL_DA_ARTST_EDUCTN_S
   		WHERE 1=1 
   			AND ARTST_SQ = #{artstSq}
   			AND MBR_SQ = #{mbrSq}
   </select>
   
   <!-- 작가학력정보 삭제 -->
   <delete id="authorEduInfoDelete"> 
   		DELETE FROM TBL_DA_ARTST_EDUCTN_S WHERE EDUCTN_SQ = #{eductnSq} 
   </delete>
   
   <!-- 작가학력정보 등록유무 체크를 위한 카운터 -->
   <select id="authorEduInfoCheckCount" resultType="int">
	  	SELECT
	    	COUNT(*) AS CNT      
		FROM TBL_DA_ARTST_EDUCTN_S
	    WHERE EDUCTN_SQ = #{eductnSq}
  </select>
  
  <!--  작가학력정보 수정 -->
  <update id="authorEduInfoUpdate" parameterType="hashMap">
   		UPDATE 	
   			TBL_DA_ARTST_EDUCTN_S
   		SET		
   			EDUCTN_NM = #{eductnNm},
   			EDUCTN_MAJOR = #{eductnMajor}
   		WHERE 	EDUCTN_SQ = #{eductnSq}
   </update>
   
   
  <!-- 작가경력-경력/소속 등록 -->
  <insert id="authorCareerInfoInsert" parameterType="hashMap">
  		INSERT INTO TBL_DA_ARTST_CAREER_S
  		(
  			ARTST_SQ
			,MBR_SQ
			,CAREER_NM
			,CAREER_TYP_CD
			
  		) VALUES (
  			#{artstSq}
  		   ,#{mbrSq}
  		   ,#{careerNm}
  		   ,#{careerTypCd}
  		)
  </insert>
  
  <!-- 작가경력-경력/소속 리스트  --> 
  <select id="authorCarrerInfoList" resultType="hashMap">
   		SELECT
   			
   			CAREER_SQ AS careerSq
   			,ARTST_SQ AS artstSq 
			,MBR_SQ AS mbrSq 
			,CAREER_NM AS careerNm
			,CAREER_TYP_CD AS careerTypCd
			
   		FROM 
   			TBL_DA_ARTST_CAREER_S
   		WHERE 1=1 
   			AND ARTST_SQ = #{artstSq}
   			AND MBR_SQ = #{mbrSq}
   			AND CAREER_TYP_CD = #{careerTypCd}
   </select>
   
   <!-- 작가경력-경력 삭제 -->
   <delete id="authorCarrerInfoDelete"> 
   		DELETE FROM TBL_DA_ARTST_CAREER_S WHERE CAREER_SQ = #{careerSq} 
   </delete>
   
   <!--  작가학경력-경력 수정 -->
  <update id="authorCarrerInfoUpdate" parameterType="hashMap">
   		UPDATE 	
   			TBL_DA_ARTST_CAREER_S
   		SET		
   			CAREER_NM = #{careerNm}
   		WHERE 	
   			CAREER_SQ = #{careerSq}
   </update>
   
   
  <!-- 작가학력정보 등록유무 체크를 위한 카운터 -->
  <select id="authorCarrerInfoCheckCount" resultType="int">
	  	SELECT
	    	COUNT(*) AS CNT      
		FROM TBL_DA_ARTST_CAREER_S
	    WHERE CAREER_SQ = #{careerSq}
  </select>
  
  
  <!-- 전시정보 등록 -->
  <insert id="authorExhbtnInfoInsert" parameterType="hashMap">
  		INSERT INTO TBL_DA_ARTST_EXHBTN_S
  		(
  			ARTST_SQ
			,MBR_SQ
			,EXHBTN_NM
			,EXHBTN_TYP_CD
			
  		) VALUES (
  			#{artstSq}
  		   ,#{mbrSq}
  		   ,#{exhbtnNm}
  		   ,#{exhbtnTypCd}
  		)
  </insert>
  
   <!-- 정시정보 리스트  --> 
  <select id="authorExhbtnInfoList" resultType="hashMap">
   		SELECT
   			
   			EXHBTN_SQ AS exhbtnSq
   			,ARTST_SQ AS artstSq 
			,MBR_SQ AS mbrSq 
			,EXHBTN_NM AS exhbtnNm
			,EXHBTN_TYP_CD AS exhbtnTypCd
			
   		FROM 
   			TBL_DA_ARTST_EXHBTN_S
   		WHERE 1=1 
   			AND ARTST_SQ = #{artstSq}
   			AND MBR_SQ = #{mbrSq}
   			AND EXHBTN_TYP_CD = #{exhbtnTypCd}
   			ORDER BY EXHBTN_NM DESC
  </select>
  
  <!-- 전시정보 삭제 -->
  <delete id="authorExhbtnInfoDelete"> 
  	DELETE FROM TBL_DA_ARTST_EXHBTN_S WHERE EXHBTN_SQ = #{exhbtnSq} 
  </delete>
  
  <!-- 전시정보 수정 -->
  <update id="authorExhbtnInfoUpdate" parameterType="hashMap">
   		UPDATE 	
   			TBL_DA_ARTST_EXHBTN_S
   		SET		
   			EXHBTN_NM = #{exhbtnNm}
   		WHERE 	
   			EXHBTN_SQ = #{exhbtnSq}
  </update>
  
  <!-- 전시정보 등록유무 체크를 위한 카운터 -->
  <select id="authorExhbtnInfoCheckCount" resultType="int">
	  	SELECT
	    	COUNT(*) AS CNT      
		FROM TBL_DA_ARTST_EXHBTN_S
	    WHERE EXHBTN_SQ = #{exhbtnSq}
  </select>
  
  <select id="scrapCheck" parameterType="hashMap" resultType="int">
  	/*회원 스크랩 여부 조회*/
  	SELECT 
			COUNT(*)
	FROM
			TBL_DA_MBR_SCRAP_R
	WHERE 
			MBR_SQ = #{mbrSq}
		<if test="workSq != null and workSq != ''">
		AND WORK_SQ = #{workSq}
		</if>
		<if test="dealSq != null and dealSq != ''">
		AND DEAL_SQ = #{dealSq}
		</if>
		<if test="comtSq != null and comtSq != ''">
		AND COMT_SQ = #{comtSq}
		</if>
		<if test="mgzSq != null and mgzSq != ''">
		AND MGZ_SQ = #{mgzSq}
		</if>
  </select>
   
   <insert id="scrapAdd" parameterType="hashMap">
   		/*회원 스크랩 추가*/
   		INSERT INTO 
   					TBL_DA_MBR_SCRAP_R (
						MBR_SQ
						, WORK_SQ
						, DEAL_SQ
						, COMT_SQ
						, MGZ_SQ
						, REG_DT
   					) VALUES (
   						#{mbrSq}
   						, #{workSq}
   						, #{dealSq}
   						, #{comtSq}
   						, #{mgzSq}
   						, NOW()
   					)
   </insert>
   
   <delete id="scrapDel" parameterType="hashMap">
   		/*회원 스크랩 삭제*/
   		DELETE	FROM 
 					TBL_DA_MBR_SCRAP_R
   				WHERE
   					MBR_SQ = #{mbrSq}
   				<if test="workSq != null and workSq != ''">
   				AND WORK_SQ = #{workSq}
   				</if>
   				<if test="dealSq != null and dealSq != ''">
   				AND DEAL_SQ = #{dealSq}
   				</if>
   				<if test="comtSq != null and comtSq != ''">
   				AND COMT_SQ = #{comtSq}
   				</if>
   				<if test="mgzSq != null and mgzSq != ''">
   				AND MGZ_SQ = #{mgzSq}
   				</if>
   </delete>
   
   <update id="updateComtScraps" parameterType="hashMap">
   	/*커뮤니티 게시물 스크랩수 증감*/
		UPDATE 
				TBL_DA_COMT_M
			SET
			<if test='divCd.equals("ADD")'>
				COMT_SCRAPS = COMT_SCRAPS + 1
			</if>
			<if test='divCd.equals("DEL")'>
				COMT_SCRAPS = COMT_SCRAPS - 1
			</if>	
		WHERE 
				COMT_SQ = #{comtSq}
   </update>

	<select id="likeCheck" parameterType="hashMap" resultType="int">
		/* 좋아요 체크 여부 조회 */
		SELECT
				COUNT(*)
		FROM
				TBL_DA_MBR_SCRAP_R
		WHERE
				MBR_SQ = #{mbrSq}
		<if test="workSq != null and workSq != ''">
			AND WORK_SQ = #{workSq}
		</if>
		<if test="dealSq != null and dealSq != ''">
			AND DEAL_SQ = #{dealSq}
		</if>
		<if test="comtSq != null and comtSq != ''">
			AND COMT_SQ = #{comtSq}
		</if>
		<if test="mgzSq != null and mgzSq != ''">
			AND MGZ_SQ = #{mgzSq}
		</if>
		<if test="likeCnt != null and likeCnt != ''">
			AND FW_MBR_SQ = #{likeCnt}
		</if>
	</select>

	<insert id="likeAdd" parameterType="hashMap">
		/*회원 좋아요 추가*/
		INSERT INTO TBL_DA_MBR_SCRAP_R (
			  MBR_SQ
			, COMT_SQ
			, FW_MBR_SQ
		) VALUES (
			  #{mbrSq}
			, #{comtSq}
			, #{likeCnt}
		)
	</insert>

	<delete id="likeDel" parameterType="hashMap">
		/*회원 좋아요 취소*/
		DELETE FROM
				TBL_DA_MBR_SCRAP_R
		WHERE
				MBR_SQ = #{mbrSq}
		<if test="workSq != null and workSq != ''">
			AND WORK_SQ = #{workSq}
		</if>
		<if test="comtSq != null and comtSq != ''">
			AND COMT_SQ = #{comtSq}
		</if>
	</delete>

	<update id="updateLikeCnt" parameterType="hashMap">
		/* 좋아요 갯수 변경 */
		UPDATE
				TBL_DA_COMT_M
		SET
		<if test='likeCnt == "LIKE_ADD"'>
			COMT_LIKES = COMT_LIKES + 1
		</if>
		<if test='likeCnt == "LIKE_DEL"'>
			COMT_LIKES = COMT_LIKES - 1
		</if>
		WHERE COMT_SQ = #{comtSq}
	</update>
   
   <update id="autoLogin">
   		/*자동 로그인 정보 수정 등록*/
   		UPDATE TBL_DA_MBR_M 
   				SET
						AUTO_LOGIN_YN = #{autoLoginYn},
						AUTO_LOGIN_SSN_ID = #{autoLoginSsnId},
						AUTO_LOGIN_DATE = #{autoLoginDate}
				WHERE
						MBR_SQ = #{mbrSq}	
   </update>
   
   <select id="getSessionId" resultType="com.da.vo.AutoLoginVo" parameterType="String">
   		/*자동로그인 세션 아이디 가져오기*/
   		SELECT 
				A.MBR_SQ AS mbrSq,
				A.AUTH_SQ AS authSq
   		FROM 
   				TBL_DA_MBR_M AS A
   		WHERE 
   				A.AUTO_LOGIN_SSN_ID = #{value}
   </select>
   
   <select id="findId" resultType="hashMap" parameterType="String">
   		/*회원 아이디 찾기*/
   		SELECT 
				MBR_SQ AS mbrSq,
				MBR_ID AS mbrId,
				DATE_FORMAT(REG_DT, '%Y.%m.%d') AS mbrRegDt
		FROM 
				TBL_DA_MBR_M
		WHERE 
				USE_YN = 'Y'
			AND DEL_YN = 'N'
			AND	MBR_CP_CERT_DI = #{mbrCpCertDi}
   </select>
   
   <select id="selectMbrCpCertDi" resultType="String" parameterType="String">
   		/*회원 중복체크 전 개인고유 번호 null 체크*/
   		SELECT
   				MBR_CP_CERT_DI AS mbrCpCertDi
   		FROM
   				TBL_DA_MBR_M
   		WHERE
   				USE_YN = 'Y'
			AND DEL_YN = 'N'
   			AND	MBR_CP_CERT_DI = #{mbrCpCertDi}
   </select>
   
   <select id="memberDuplicateCheck" resultType="int" parameterType="String">
   		/*회원 중복체크*/
   		SELECT 
				COUNT(*)
		FROM
				TBL_DA_MBR_M
		WHERE 
				USE_YN = 'Y'
			AND	DEL_YN = 'N'
			AND	MBR_CP_CERT_DI = #{mbrCpCertDi}
   </select>
   
   <select id="changePasswrdCheck" parameterType="hashMap" resultType="int">
   		/*회원 변경 비밀번호 중복체크*/
   		SELECT 
				COUNT(MBR_ID)
		FROM
				TBL_DA_MBR_M
		WHERE 
				MBR_ID = #{mbrId}
		AND		MBR_PASSWRD = #{mbrPasswrd}
   </select>
   
   <update id="changePasswrd" parameterType="hashMap">
   		/*회원 비밀번호 변경*/
   		UPDATE 
				TBL_DA_MBR_M 
		SET
				MBR_PASSWRD = #{mbrPasswrd}
		WHERE 
				MBR_ID = #{mbrId}
   </update>
   
   <select id="mbrInfo" parameterType="String" resultType="com.da.vo.MbrInfoVo">
   		/*회원 정보*/
   		SELECT * FROM TBL_DA_MBR_M WHERE MBR_SQ = #{mbrSq}
   </select>
   
   <update id="mbrDelivryAddrCor">
   		/*회원 배송 정보 수정*/
   		UPDATE
  				TBL_DA_MBR_M
   		SET
   				MBR_DELIVRY_ADDR = #{mbrDelivryAddr},
   				MBR_DELIVRY_CP_NUM = #{mbrDelivryCpNum}
   				<if test="mbrAccountNo != null and mbrAccountNo != ''">
   				,MBR_ACCOUNT_NO = #{mbrAccountNo}
   				</if>
   				<if test="mbrBankCd != null and mbrBankCd != ''">
   				,MBR_BANK_CD = #{mbrBankCd}
   				</if>
   				<if test="mbrBankNm != null and mbrBankNm != ''">
   				,MBR_BANK_NM = #{mbrBankNm}
   				</if>
   		WHERE 
   				MBR_SQ = #{mbrSq}
   </update>
   
   <select id="selectMbrNcknmCount" resultType="int" parameterType="String">
   		/*회원 활동명 중복체크*/
   		SELECT 
				COUNT(MBR_SQ) 
		FROM 
				TBL_DA_MBR_M
		WHERE 
				MBR_NCKNM = #{mbrNcknm}
   </select>
   
   <select id="findPwd" resultType="String" parameterType="hashMap">
   		/*회원 비밀번호 찾기*/
   		SELECT
   				MBR_ID
   		FROM
   				TBL_DA_MBR_M
   		WHERE
   				USE_YN = 'Y'
			AND DEL_YN = 'N'
   			AND	MBR_CP_CERT_DI = #{mbrCpCertDi}
   </select>
   
   <select id="findBrdMbr" resultType="hashMap">
		SELECT
		    A.BRD_SQ AS brdSq,
		    A.BRD_TITLE AS brdTitle,
		    A.BRD_CONTENT AS brdContent,
		    A.BRD_CON_TYP_CD AS brdConTypCd,
		    (CASE
		        WHEN A.BRD_CON_TYP_CD = "UP" THEN "이용정책"
		        WHEN A.BRD_CON_TYP_CD = "CO" THEN "공통"
		        WHEN A.BRD_CON_TYP_CD = "PU" THEN "구매"
		        WHEN A.BRD_CON_TYP_CD = "SA" THEN "판매"
		        WHEN A.BRD_CON_TYP_CD = "TR" THEN "운송"
		        WHEN A.BRD_CON_TYP_CD = "DE" THEN "거래"
		     END) AS brdConTypCdTxt,
		    A.BRD_TYP_CD AS brdTypCd,
		    A.REG_MBR_SQ AS regMbrSq,
		    DATE_FORMAT(A.REG_DT, "%Y-%m-%d") AS regDt,
		    A.UPDT_MBR_SQ AS updtMbrSq,
		    DATE_FORMAT(A.UPDT_DT, "%Y-%m-%d") AS updtDt,
		    A.USE_YN AS useYn,
		    A.DEL_YN AS delYn,
		    A.BRD_AN_TYP_CD AS brdAnTypCd,
		    (CASE
		        WHEN A.BRD_AN_TYP_CD = "GE" THEN "일반"
		        WHEN A.BRD_AN_TYP_CD = "EM" THEN "긴급"
		     END) AS brdAnTypCdTxt,
		    (CASE
		        WHEN A.USE_YN = "Y" THEN "사용"
		        WHEN A.USE_YN = "N" THEN "미사용"
		     END) AS useYnTxt,
		    B.AUTH_SQ AS authSq,
		    B.MBR_SQ AS mbrSq,
		    B.MBR_ID AS mbrId,
		    B.MBR_EMAIL AS mbrEmail,
		    B.MBR_PASSWRD AS mbrPasswrd,
		    B.MBR_NM AS mbrNm,
		    B.MBR_NCKNM AS mbrNcknm,
		    B.MBR_NATN_CD AS mbrNatnCd,
		    B.MBR_BIRTH AS mbrBirth,
		    (CASE
		        WHEN B.MBR_SEX_CD = 'MALE' THEN '남'
		        WHEN B.MBR_SEX_CD = 'FEMALE' THEN '여'
		     END) AS mbrSexCd,
		    B.MBR_SEX_CD AS mbrSexCdChk,
		    B.MBR_HOME_ADDR AS mbrHomeAddr,
		    B.MBR_DELIVRY_ADDR AS mbrDelivryAddr,
		    B.MBR_CP_NUM AS mbrCpNum,
		    B.MBR_CP_CERT_YN AS mbrCpCertYn,
		    DATE_FORMAT(B.MBR_CP_CERT_DATE, '%Y-%m-%d %H:%i:%s') AS mbrCpCertDate,
		    B.REG_MBR_SQ AS regMbrSqMember,
		    DATE_FORMAT(B.REG_DT, '%Y-%m-%d') AS regDtMember,
		    B.UPDT_MBR_SQ AS updtMbrSqMember,
		    DATE_FORMAT(B.UPDT_DT, '%Y-%m-%d') AS updtDtMember,
		    B.USE_YN AS useYnMember,
		    B.DEL_YN AS delYnMember,
		    B.MBR_EML_ALARM AS mbrEmlAlarm,
		    B.MBR_CP_ALARM AS mbrCpAlarm,
		    B.MBR_CP_CERT_DI AS mbrCpCertDi,
		    B.MBR_ACCOUNT_NO AS mbrAccountNo,
		    B.MBR_BANK_CD AS mbrBankCd,
		    B.MBR_BANK_NM AS mbrBankNm,
		    B.MBR_PROFILE_IMG_URL AS mbrProfileImgUrl,
		    B.MBR_GENRE_LIST AS mbrGenreList,
		    B.MBR_HOBBY_LIST AS mbrhobbyList,
		    B.MBR_AGE_LIST AS mbrageList,
		    B.MBR_JOB_LIST AS mbrjobList,
		    B.MBR_INTRO AS mbrintro,
		    COUNT(A.BRD_SQ) AS numBoards
		    
		FROM
		    TBL_DA_BRD_M A
		JOIN
		    TBL_DA_MBR_M B ON A.BRD_SQ = B.MBR_SQ
		WHERE
		    A.BRD_TYP_CD = #{brdTypCd} AND A.BRD_SQ = #{brdSq} 
	 	 GROUP BY
  		  B.MBR_SQ, B.MBR_ID
		HAVING
  		  numBoards > 0;
    </select>
    
</mapper>